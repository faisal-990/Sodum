#include<iostream>
#include<vector>
using namespace std;
class DisjointSet {
	vector<int>parent , rank ,size;
public:
	DisjointSet( int n)
	{
		//resize all of them and initialize with the default values
		parent.resize(n +1 );
		rank.resize(n+1, 0);
		size.resize(n+1 );
		for(int i=0;i<=n ;i++)
		{
			parent[i] = i;
			size[i ] = i;
		}
	}
	//implementing the find function
	int find1( int val)
	{
		if(parent[val] == val)
		{
			return val;
		}
		return parent[val] = find1(parent[val]);
	}
	void UnionByRank(int u , int v)
	{
		int ult_u = find1(u);
		int ult_v = find1(v);
		if(ult_u == ult_v)
		{
			//they are already combined
			return ;
		}
		if(rank[ult_u] > rank[ult_v])
		{
			//v will be attached to u
			parent[ult_v] = ult_u;
		}
		else if(rank[ult_v] >rank[ult_u])
		{
			parent[ult_u] = ult_v;
		}
		else
		{
			//attach anyone to the other
			parent[ult_v] = ult_u;
			rank[ult_u]++;
		}
	}


	void UnionBySize( int u , int v)
	{
		int ult_u = find1(u);
		int ult_v = find1(v);
		if(ult_u == ult_v) return ;
		if(size[ult_u] > size[ult_v])
		{
			//attach the ultimate parent of v to u
			parent[ult_v] = ult_u;
			size[ult_u]+=size[ult_v];
		}
		else 
		{
			parent[ult_u] = ult_v;
			size[ult_v]+=size[ult_u];
		}
		return;
	}
};
int main() 
{
	DisjointSet ds(7);
	ds.UnionBySize(1 ,2);
	ds.UnionBySize(2 ,3);
	ds.UnionBySize(4 ,5);
	ds.UnionBySize(6 ,7);
	ds.UnionBySize(5 ,6);
	if(ds.find1(3) == ds.find1(7))
	{
		cout<<"same"<<endl;
	}
	else
	{
		cout<<"not same"<<endl;
	}
	ds.UnionBySize(3 , 7);

	if(ds.find1(3) == ds.find1(7))
	{
		cout<<"same"<<endl;
	}
	else
	{
		cout<<"not same"<<endl;
	}
	return 0;
}

